/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace View {
  export type DepositStruct = {
    amount: BigNumberish;
    start: BigNumberish;
    end: BigNumberish;
    multiplier: BigNumberish;
  };

  export type DepositStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    start: BigNumber;
    end: BigNumber;
    multiplier: BigNumber;
  };

  export type PoolStruct = {
    poolAddress: string;
    totalPoolShares: BigNumberish;
    depositToken: string;
    accountPendingRewards: BigNumberish;
    accountClaimedRewards: BigNumberish;
    accountTotalDeposit: BigNumberish;
    accountPoolShares: BigNumberish;
    weight: BigNumberish;
    deposits: View.DepositStruct[];
  };

  export type PoolStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    View.DepositStructOutput[],
  ] & {
    poolAddress: string;
    totalPoolShares: BigNumber;
    depositToken: string;
    accountPendingRewards: BigNumber;
    accountClaimedRewards: BigNumber;
    accountTotalDeposit: BigNumber;
    accountPoolShares: BigNumber;
    weight: BigNumber;
    deposits: View.DepositStructOutput[];
  };

  export type DataStruct = {
    pendingRewards: BigNumberish;
    pools: View.PoolStruct[];
    escrowPool: View.PoolStruct;
    totalWeight: BigNumberish;
  };

  export type DataStructOutput = [BigNumber, View.PoolStructOutput[], View.PoolStructOutput, BigNumber] & {
    pendingRewards: BigNumber;
    pools: View.PoolStructOutput[];
    escrowPool: View.PoolStructOutput;
    totalWeight: BigNumber;
  };
}

export interface EscrowPoolInterface extends utils.Interface {
  functions: {
    'escrowPool()': FunctionFragment;
    'fetchData(address)': FunctionFragment;
    'liquidityMiningManager()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'escrowPool' | 'fetchData' | 'liquidityMiningManager'): FunctionFragment;

  encodeFunctionData(functionFragment: 'escrowPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fetchData', values: [string]): string;
  encodeFunctionData(functionFragment: 'liquidityMiningManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'escrowPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fetchData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityMiningManager', data: BytesLike): Result;

  events: {};
}

export interface EscrowPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    escrowPool(overrides?: CallOverrides): Promise<[string]>;

    fetchData(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[View.DataStructOutput] & { result: View.DataStructOutput }>;

    liquidityMiningManager(overrides?: CallOverrides): Promise<[string]>;
  };

  escrowPool(overrides?: CallOverrides): Promise<string>;

  fetchData(_account: string, overrides?: CallOverrides): Promise<View.DataStructOutput>;

  liquidityMiningManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    escrowPool(overrides?: CallOverrides): Promise<string>;

    fetchData(_account: string, overrides?: CallOverrides): Promise<View.DataStructOutput>;

    liquidityMiningManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    escrowPool(overrides?: CallOverrides): Promise<BigNumber>;

    fetchData(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityMiningManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    escrowPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchData(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityMiningManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
